@model IEnumerable<stanochki.Models.Prices>

@{
    ViewBag.Title = "Каталог услуг";
}

<h2>Каталог услуг</h2>

<br />

@using (Html.BeginForm())
{
    <p>
        Найти по станку:
    </p>
    <form class="card p-2">
        <div class="input-group">
            <input type="text" class="form-control" @Html.TextBox("Searchbymachine")
            <button type="submit" class="btn btn-outline-primary">Искать</button>
        </div>
    </form>

}
<br />
@using (Html.BeginForm())
{
    <p>
        Найти по виду ремонта:
    </p>
    <form class="card p-2">
        <div class="input-group">
            <input type="text" class="form-control" @Html.TextBox("Searchbyrepair")
            <button type="submit" class="btn btn-outline-primary">Искать</button>
        </div>
    </form>
}
<br />
<h5>Сортировка по</h5>
<table class="table">
    <tr align="center">
        <th align="center">
            @Html.ActionLink("Станкам", "Index", new { sortOrder = ViewBag.machineSortParm }, new { @class = "btn btn-outline-primary" })
        </th>
        <th align="center">
            @Html.ActionLink("Ремонтам", "Index", new { sortOrder = ViewBag.repairSortParm }, new { @class = "btn btn-outline-primary" })
        </th>
        <th align="center">
            @Html.ActionLink("Цене", "Index", new { sortOrder = ViewBag.priceSortParm }, new { @class = "btn btn-outline-primary" })
        </th>
    </tr>
</table>
@if (Session["Rights"] != null)
 {  
    if (Session["Rights"].Equals("worker"))
{
@Html.ActionLink("Добавить услугу", "Create", null, new { @class = "btn btn-outline-primary" })
}
}
<div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
    @{foreach (var item in Model)
        {
            <div class="col align-content-lg-center col-lg-3">
                <div class="card shadow-sm m-lg-2">
                    @{ byte[] photo = item.photo;
                        string imageSrc = null;
                        if (photo != null)
                        {
                            MemoryStream ms = new MemoryStream();
                            ms.Write(photo, 0, photo.Length);
                            string imageBase64 = Convert.ToBase64String(ms.ToArray());
                            imageSrc = string.Format("data:image/jpg;base64,{0}", imageBase64);
                            string base64String = Convert.ToBase64String(photo, 0, photo.Length);
                        }
                    }

                    <img class="bd-placeholder-img card-img-top" src="@imageSrc" alt="Image" width="225" height="225"
                         slice" focusable="true">

                    <div class="card-body">
                        <p class="card-text h5 fw-bold">
                            @Html.DisplayFor(modelItem => item.machine)
                        </p>
                        <br />
                        <p class="card-text">
                            @Html.DisplayFor(modelItem => item.repair)
                        </p>
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="btn-group">
                                @Html.ActionLink("Подробнее", "Details", new { id = item.id_price }, new { @class = "button btn btn-sm btn-outline-secondary" })
                                @if (Session["Rights"] != null)
                                {
                                    if (Session["Rights"].Equals("worker"))
                                    {
                                    @Html.ActionLink("Изменить", "Edit", new { id = item.id_price }, new { @class = "button btn btn-sm btn-outline-secondary" })
                                    }
                                }
                            </div>
                            <small class="text-muted">@Html.DisplayFor(modelItem => item.price) руб</small>
                        </div>
                    </div>
                </div>
            </div>
        }
    }

</div>
@*</div>
    <table class="table">
        <tr>
            <th>
                @Html.ActionLink("machine", "Index", new { sortOrder = ViewBag.machineSortParm })
            </th>
            <th>
                @Html.ActionLink("repair", "Index", new { sortOrder = ViewBag.repairSortParm })
            </th>
            <th>
                @Html.ActionLink("price", "Index", new { sortOrder = ViewBag.priceSortParm })
            </th>
            <th>
                @Html.DisplayNameFor(model => model.descript)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.photo)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.machine)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.repair)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.price)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.descript)
                </td>
                <td>

                    @{ byte[] photo = item.photo;
                        string imageSrc = null;
                        if (photo != null)
                        {
                            MemoryStream ms = new MemoryStream();
                            ms.Write(photo, 0, photo.Length);
                            string imageBase64 = Convert.ToBase64String(ms.ToArray());
                            imageSrc = string.Format("data:image/jpg;base64,{0}", imageBase64);
                            string base64String = Convert.ToBase64String(photo, 0, photo.Length);
                        }
                    }

                    <img src="@imageSrc" alt="Image" width="200" height="200" />
                </td>

                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.id_price }) |
                    @Html.ActionLink("Details", "Details", new { id = item.id_price }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.id_price })
                </td>
            </tr>
        }

    </table>*@

